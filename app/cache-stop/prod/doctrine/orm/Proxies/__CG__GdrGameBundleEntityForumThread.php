<?php

namespace Proxies\__CG__\Gdr\GameBundle\Entity;

/**
 * DO NOT EDIT THIS FILE - IT WAS CREATED BY DOCTRINE'S PROXY GENERATOR
 */
class ForumThread extends \Gdr\GameBundle\Entity\ForumThread implements \Doctrine\ORM\Proxy\Proxy
{
    /**
     * @var \Closure the callback responsible for loading properties in the proxy object. This callback is called with
     *      three parameters, being respectively the proxy object to be initialized, the method that triggered the
     *      initialization process and an array of ordered parameters that were passed to that method.
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setInitializer
     */
    public $__initializer__;

    /**
     * @var \Closure the callback responsible of loading properties that need to be copied in the cloned object
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setCloner
     */
    public $__cloner__;

    /**
     * @var boolean flag indicating if this object was already initialized
     *
     * @see \Doctrine\Common\Persistence\Proxy::__isInitialized
     */
    public $__isInitialized__ = false;

    /**
     * @var array properties to be lazy loaded, with keys being the property
     *            names and values being their default values
     *
     * @see \Doctrine\Common\Persistence\Proxy::__getLazyProperties
     */
    public static $lazyPropertiesDefaults = [];



    /**
     * @param \Closure $initializer
     * @param \Closure $cloner
     */
    public function __construct($initializer = null, $cloner = null)
    {

        $this->__initializer__ = $initializer;
        $this->__cloner__      = $cloner;
    }







    /**
     * 
     * @return array
     */
    public function __sleep()
    {
        if ($this->__isInitialized__) {
            return ['__isInitialized__', '' . "\0" . 'Gdr\\GameBundle\\Entity\\ForumThread' . "\0" . 'id', '' . "\0" . 'Gdr\\GameBundle\\Entity\\ForumThread' . "\0" . 'title', '' . "\0" . 'Gdr\\GameBundle\\Entity\\ForumThread' . "\0" . 'createdAt', '' . "\0" . 'Gdr\\GameBundle\\Entity\\ForumThread' . "\0" . 'category', '' . "\0" . 'Gdr\\GameBundle\\Entity\\ForumThread' . "\0" . 'lastPostAuthor', '' . "\0" . 'Gdr\\GameBundle\\Entity\\ForumThread' . "\0" . 'lastPostTime', '' . "\0" . 'Gdr\\GameBundle\\Entity\\ForumThread' . "\0" . 'readed', '' . "\0" . 'Gdr\\GameBundle\\Entity\\ForumThread' . "\0" . 'replied', '' . "\0" . 'Gdr\\GameBundle\\Entity\\ForumThread' . "\0" . 'status', '' . "\0" . 'Gdr\\GameBundle\\Entity\\ForumThread' . "\0" . 'isLocked', 'post', '' . "\0" . 'Gdr\\GameBundle\\Entity\\ForumThread' . "\0" . 'firstPostAuthor', 'isDeleted'];
        }

        return ['__isInitialized__', '' . "\0" . 'Gdr\\GameBundle\\Entity\\ForumThread' . "\0" . 'id', '' . "\0" . 'Gdr\\GameBundle\\Entity\\ForumThread' . "\0" . 'title', '' . "\0" . 'Gdr\\GameBundle\\Entity\\ForumThread' . "\0" . 'createdAt', '' . "\0" . 'Gdr\\GameBundle\\Entity\\ForumThread' . "\0" . 'category', '' . "\0" . 'Gdr\\GameBundle\\Entity\\ForumThread' . "\0" . 'lastPostAuthor', '' . "\0" . 'Gdr\\GameBundle\\Entity\\ForumThread' . "\0" . 'lastPostTime', '' . "\0" . 'Gdr\\GameBundle\\Entity\\ForumThread' . "\0" . 'readed', '' . "\0" . 'Gdr\\GameBundle\\Entity\\ForumThread' . "\0" . 'replied', '' . "\0" . 'Gdr\\GameBundle\\Entity\\ForumThread' . "\0" . 'status', '' . "\0" . 'Gdr\\GameBundle\\Entity\\ForumThread' . "\0" . 'isLocked', 'post', '' . "\0" . 'Gdr\\GameBundle\\Entity\\ForumThread' . "\0" . 'firstPostAuthor', 'isDeleted'];
    }

    /**
     * 
     */
    public function __wakeup()
    {
        if ( ! $this->__isInitialized__) {
            $this->__initializer__ = function (ForumThread $proxy) {
                $proxy->__setInitializer(null);
                $proxy->__setCloner(null);

                $existingProperties = get_object_vars($proxy);

                foreach ($proxy->__getLazyProperties() as $property => $defaultValue) {
                    if ( ! array_key_exists($property, $existingProperties)) {
                        $proxy->$property = $defaultValue;
                    }
                }
            };

        }
    }

    /**
     * 
     */
    public function __clone()
    {
        $this->__cloner__ && $this->__cloner__->__invoke($this, '__clone', []);
    }

    /**
     * Forces initialization of the proxy
     */
    public function __load()
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, '__load', []);
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitialized($initialized)
    {
        $this->__isInitialized__ = $initialized;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitializer(\Closure $initializer = null)
    {
        $this->__initializer__ = $initializer;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __getInitializer()
    {
        return $this->__initializer__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setCloner(\Closure $cloner = null)
    {
        $this->__cloner__ = $cloner;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific cloning logic
     */
    public function __getCloner()
    {
        return $this->__cloner__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     * @static
     */
    public function __getLazyProperties()
    {
        return self::$lazyPropertiesDefaults;
    }

    
    /**
     * {@inheritDoc}
     */
    public function __toString()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, '__toString', []);

        return parent::__toString();
    }

    /**
     * {@inheritDoc}
     */
    public function getId()
    {
        if ($this->__isInitialized__ === false) {
            return (int)  parent::getId();
        }


        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getId', []);

        return parent::getId();
    }

    /**
     * {@inheritDoc}
     */
    public function setTitle($title)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setTitle', [$title]);

        return parent::setTitle($title);
    }

    /**
     * {@inheritDoc}
     */
    public function getTitle()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getTitle', []);

        return parent::getTitle();
    }

    /**
     * {@inheritDoc}
     */
    public function setCreatedAt($createdAt)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setCreatedAt', [$createdAt]);

        return parent::setCreatedAt($createdAt);
    }

    /**
     * {@inheritDoc}
     */
    public function getCreatedAt()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCreatedAt', []);

        return parent::getCreatedAt();
    }

    /**
     * {@inheritDoc}
     */
    public function setIsDeleted($isDeleted)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setIsDeleted', [$isDeleted]);

        return parent::setIsDeleted($isDeleted);
    }

    /**
     * {@inheritDoc}
     */
    public function getIsDeleted()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getIsDeleted', []);

        return parent::getIsDeleted();
    }

    /**
     * {@inheritDoc}
     */
    public function setCategory(\Gdr\GameBundle\Entity\ForumCategory $category = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setCategory', [$category]);

        return parent::setCategory($category);
    }

    /**
     * {@inheritDoc}
     */
    public function getCategory()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCategory', []);

        return parent::getCategory();
    }

    /**
     * {@inheritDoc}
     */
    public function getLastPostAuthor()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getLastPostAuthor', []);

        return parent::getLastPostAuthor();
    }

    /**
     * {@inheritDoc}
     */
    public function setLastPostAuthor($lastPostAuthor)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setLastPostAuthor', [$lastPostAuthor]);

        return parent::setLastPostAuthor($lastPostAuthor);
    }

    /**
     * {@inheritDoc}
     */
    public function getLastPostTime()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getLastPostTime', []);

        return parent::getLastPostTime();
    }

    /**
     * {@inheritDoc}
     */
    public function setLastPostTime($lastPostTime)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setLastPostTime', [$lastPostTime]);

        return parent::setLastPostTime($lastPostTime);
    }

    /**
     * {@inheritDoc}
     */
    public function getReaded()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getReaded', []);

        return parent::getReaded();
    }

    /**
     * {@inheritDoc}
     */
    public function setReaded($readed)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setReaded', [$readed]);

        return parent::setReaded($readed);
    }

    /**
     * {@inheritDoc}
     */
    public function getReplied()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getReplied', []);

        return parent::getReplied();
    }

    /**
     * {@inheritDoc}
     */
    public function setReplied($replied)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setReplied', [$replied]);

        return parent::setReplied($replied);
    }

    /**
     * {@inheritDoc}
     */
    public function getPost()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getPost', []);

        return parent::getPost();
    }

    /**
     * {@inheritDoc}
     */
    public function setPost($post)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setPost', [$post]);

        return parent::setPost($post);
    }

    /**
     * {@inheritDoc}
     */
    public function getStatus()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getStatus', []);

        return parent::getStatus();
    }

    /**
     * {@inheritDoc}
     */
    public function setStatus($status)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setStatus', [$status]);

        return parent::setStatus($status);
    }

    /**
     * {@inheritDoc}
     */
    public function getIsLocked()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getIsLocked', []);

        return parent::getIsLocked();
    }

    /**
     * {@inheritDoc}
     */
    public function setIsLocked($isLocked)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setIsLocked', [$isLocked]);

        return parent::setIsLocked($isLocked);
    }

    /**
     * {@inheritDoc}
     */
    public function setFirstPostAuthor(\Gdr\UserBundle\Entity\Personage $firstPostAuthor = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setFirstPostAuthor', [$firstPostAuthor]);

        return parent::setFirstPostAuthor($firstPostAuthor);
    }

    /**
     * {@inheritDoc}
     */
    public function getFirstPostAuthor()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getFirstPostAuthor', []);

        return parent::getFirstPostAuthor();
    }

}
