<?php

namespace Proxies\__CG__\Gdr\GameBundle\Entity;

/**
 * DO NOT EDIT THIS FILE - IT WAS CREATED BY DOCTRINE'S PROXY GENERATOR
 */
class ForumCategory extends \Gdr\GameBundle\Entity\ForumCategory implements \Doctrine\ORM\Proxy\Proxy
{
    /**
     * @var \Closure the callback responsible for loading properties in the proxy object. This callback is called with
     *      three parameters, being respectively the proxy object to be initialized, the method that triggered the
     *      initialization process and an array of ordered parameters that were passed to that method.
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setInitializer
     */
    public $__initializer__;

    /**
     * @var \Closure the callback responsible of loading properties that need to be copied in the cloned object
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setCloner
     */
    public $__cloner__;

    /**
     * @var boolean flag indicating if this object was already initialized
     *
     * @see \Doctrine\Common\Persistence\Proxy::__isInitialized
     */
    public $__isInitialized__ = false;

    /**
     * @var array properties to be lazy loaded, with keys being the property
     *            names and values being their default values
     *
     * @see \Doctrine\Common\Persistence\Proxy::__getLazyProperties
     */
    public static $lazyPropertiesDefaults = [];



    /**
     * @param \Closure $initializer
     * @param \Closure $cloner
     */
    public function __construct($initializer = null, $cloner = null)
    {

        $this->__initializer__ = $initializer;
        $this->__cloner__      = $cloner;
    }







    /**
     * 
     * @return array
     */
    public function __sleep()
    {
        if ($this->__isInitialized__) {
            return ['__isInitialized__', 'id', 'name', 'description', 'forum', 'lastThread', 'lastPostAuthor', 'lastPostTime', 'isActive', 'isJunk', 'helpDesk', 'special', 'levelMin', '' . "\0" . 'Gdr\\GameBundle\\Entity\\ForumCategory' . "\0" . 'sort'];
        }

        return ['__isInitialized__', 'id', 'name', 'description', 'forum', 'lastThread', 'lastPostAuthor', 'lastPostTime', 'isActive', 'isJunk', 'helpDesk', 'special', 'levelMin', '' . "\0" . 'Gdr\\GameBundle\\Entity\\ForumCategory' . "\0" . 'sort'];
    }

    /**
     * 
     */
    public function __wakeup()
    {
        if ( ! $this->__isInitialized__) {
            $this->__initializer__ = function (ForumCategory $proxy) {
                $proxy->__setInitializer(null);
                $proxy->__setCloner(null);

                $existingProperties = get_object_vars($proxy);

                foreach ($proxy->__getLazyProperties() as $property => $defaultValue) {
                    if ( ! array_key_exists($property, $existingProperties)) {
                        $proxy->$property = $defaultValue;
                    }
                }
            };

        }
    }

    /**
     * 
     */
    public function __clone()
    {
        $this->__cloner__ && $this->__cloner__->__invoke($this, '__clone', []);
    }

    /**
     * Forces initialization of the proxy
     */
    public function __load()
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, '__load', []);
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitialized($initialized)
    {
        $this->__isInitialized__ = $initialized;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitializer(\Closure $initializer = null)
    {
        $this->__initializer__ = $initializer;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __getInitializer()
    {
        return $this->__initializer__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setCloner(\Closure $cloner = null)
    {
        $this->__cloner__ = $cloner;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific cloning logic
     */
    public function __getCloner()
    {
        return $this->__cloner__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     * @static
     */
    public function __getLazyProperties()
    {
        return self::$lazyPropertiesDefaults;
    }

    
    /**
     * {@inheritDoc}
     */
    public function __toString()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, '__toString', []);

        return parent::__toString();
    }

    /**
     * {@inheritDoc}
     */
    public function getId()
    {
        if ($this->__isInitialized__ === false) {
            return (int)  parent::getId();
        }


        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getId', []);

        return parent::getId();
    }

    /**
     * {@inheritDoc}
     */
    public function setName($name)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setName', [$name]);

        return parent::setName($name);
    }

    /**
     * {@inheritDoc}
     */
    public function getName()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getName', []);

        return parent::getName();
    }

    /**
     * {@inheritDoc}
     */
    public function setIsActive($isActive)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setIsActive', [$isActive]);

        return parent::setIsActive($isActive);
    }

    /**
     * {@inheritDoc}
     */
    public function getIsActive()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getIsActive', []);

        return parent::getIsActive();
    }

    /**
     * {@inheritDoc}
     */
    public function setLevelMin($levelMin)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setLevelMin', [$levelMin]);

        return parent::setLevelMin($levelMin);
    }

    /**
     * {@inheritDoc}
     */
    public function getLevelMin()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getLevelMin', []);

        return parent::getLevelMin();
    }

    /**
     * {@inheritDoc}
     */
    public function setForum(\Gdr\GameBundle\Entity\Forum $forum = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setForum', [$forum]);

        return parent::setForum($forum);
    }

    /**
     * {@inheritDoc}
     */
    public function getForum()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getForum', []);

        return parent::getForum();
    }

    /**
     * {@inheritDoc}
     */
    public function getDescription()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getDescription', []);

        return parent::getDescription();
    }

    /**
     * {@inheritDoc}
     */
    public function setDescription($description)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setDescription', [$description]);

        return parent::setDescription($description);
    }

    /**
     * {@inheritDoc}
     */
    public function getLastPostTime()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getLastPostTime', []);

        return parent::getLastPostTime();
    }

    /**
     * {@inheritDoc}
     */
    public function setLastPostTime($lastPostTime)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setLastPostTime', [$lastPostTime]);

        return parent::setLastPostTime($lastPostTime);
    }

    /**
     * {@inheritDoc}
     */
    public function getLastPostAuthor()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getLastPostAuthor', []);

        return parent::getLastPostAuthor();
    }

    /**
     * {@inheritDoc}
     */
    public function setLastPostAuthor($lastPostAuthor)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setLastPostAuthor', [$lastPostAuthor]);

        return parent::setLastPostAuthor($lastPostAuthor);
    }

    /**
     * {@inheritDoc}
     */
    public function setLastThread(\Gdr\GameBundle\Entity\ForumThread $lastThread = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setLastThread', [$lastThread]);

        return parent::setLastThread($lastThread);
    }

    /**
     * {@inheritDoc}
     */
    public function getLastThread()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getLastThread', []);

        return parent::getLastThread();
    }

    /**
     * {@inheritDoc}
     */
    public function getIsJunk()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getIsJunk', []);

        return parent::getIsJunk();
    }

    /**
     * {@inheritDoc}
     */
    public function setIsJunk($isJunk)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setIsJunk', [$isJunk]);

        return parent::setIsJunk($isJunk);
    }

    /**
     * {@inheritDoc}
     */
    public function getHelpDesk()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getHelpDesk', []);

        return parent::getHelpDesk();
    }

    /**
     * {@inheritDoc}
     */
    public function setHelpDesk($helpDesk)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setHelpDesk', [$helpDesk]);

        return parent::setHelpDesk($helpDesk);
    }

    /**
     * {@inheritDoc}
     */
    public function getSpecial()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getSpecial', []);

        return parent::getSpecial();
    }

    /**
     * {@inheritDoc}
     */
    public function setSpecial($special)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setSpecial', [$special]);

        return parent::setSpecial($special);
    }

    /**
     * {@inheritDoc}
     */
    public function getSort()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getSort', []);

        return parent::getSort();
    }

    /**
     * {@inheritDoc}
     */
    public function setSort($sort)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setSort', [$sort]);

        return parent::setSort($sort);
    }

}
