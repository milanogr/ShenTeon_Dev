<?php

namespace Proxies\__CG__\Gdr\GameBundle\Entity;

/**
 * DO NOT EDIT THIS FILE - IT WAS CREATED BY DOCTRINE'S PROXY GENERATOR
 */
class ForumPost extends \Gdr\GameBundle\Entity\ForumPost implements \Doctrine\ORM\Proxy\Proxy
{
    /**
     * @var \Closure the callback responsible for loading properties in the proxy object. This callback is called with
     *      three parameters, being respectively the proxy object to be initialized, the method that triggered the
     *      initialization process and an array of ordered parameters that were passed to that method.
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setInitializer
     */
    public $__initializer__;

    /**
     * @var \Closure the callback responsible of loading properties that need to be copied in the cloned object
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setCloner
     */
    public $__cloner__;

    /**
     * @var boolean flag indicating if this object was already initialized
     *
     * @see \Doctrine\Common\Persistence\Proxy::__isInitialized
     */
    public $__isInitialized__ = false;

    /**
     * @var array properties to be lazy loaded, with keys being the property
     *            names and values being their default values
     *
     * @see \Doctrine\Common\Persistence\Proxy::__getLazyProperties
     */
    public static $lazyPropertiesDefaults = [];



    /**
     * @param \Closure $initializer
     * @param \Closure $cloner
     */
    public function __construct($initializer = null, $cloner = null)
    {

        $this->__initializer__ = $initializer;
        $this->__cloner__      = $cloner;
    }







    /**
     * 
     * @return array
     */
    public function __sleep()
    {
        if ($this->__isInitialized__) {
            return ['__isInitialized__', '' . "\0" . 'Gdr\\GameBundle\\Entity\\ForumPost' . "\0" . 'id', 'thread', 'author', '' . "\0" . 'Gdr\\GameBundle\\Entity\\ForumPost' . "\0" . 'body', '' . "\0" . 'Gdr\\GameBundle\\Entity\\ForumPost' . "\0" . 'createdAt', '' . "\0" . 'Gdr\\GameBundle\\Entity\\ForumPost' . "\0" . 'updatedAt', '' . "\0" . 'Gdr\\GameBundle\\Entity\\ForumPost' . "\0" . 'updatedBy', '' . "\0" . 'Gdr\\GameBundle\\Entity\\ForumPost' . "\0" . 'authorName', '' . "\0" . 'Gdr\\GameBundle\\Entity\\ForumPost' . "\0" . 'authorRaceName', '' . "\0" . 'Gdr\\GameBundle\\Entity\\ForumPost' . "\0" . 'authorRaceIcon', '' . "\0" . 'Gdr\\GameBundle\\Entity\\ForumPost' . "\0" . 'authorLevelName', '' . "\0" . 'Gdr\\GameBundle\\Entity\\ForumPost' . "\0" . 'authorLevelIcon', '' . "\0" . 'Gdr\\GameBundle\\Entity\\ForumPost' . "\0" . 'isFirstPost', '' . "\0" . 'Gdr\\GameBundle\\Entity\\ForumPost' . "\0" . 'isLastPost', '' . "\0" . 'Gdr\\GameBundle\\Entity\\ForumPost' . "\0" . 'nameAsAdmin', '' . "\0" . 'Gdr\\GameBundle\\Entity\\ForumPost' . "\0" . 'nameAsMod', '' . "\0" . 'Gdr\\GameBundle\\Entity\\ForumPost' . "\0" . 'isClosed', '' . "\0" . 'Gdr\\GameBundle\\Entity\\ForumPost' . "\0" . 'isDeleted', 'threadForm'];
        }

        return ['__isInitialized__', '' . "\0" . 'Gdr\\GameBundle\\Entity\\ForumPost' . "\0" . 'id', 'thread', 'author', '' . "\0" . 'Gdr\\GameBundle\\Entity\\ForumPost' . "\0" . 'body', '' . "\0" . 'Gdr\\GameBundle\\Entity\\ForumPost' . "\0" . 'createdAt', '' . "\0" . 'Gdr\\GameBundle\\Entity\\ForumPost' . "\0" . 'updatedAt', '' . "\0" . 'Gdr\\GameBundle\\Entity\\ForumPost' . "\0" . 'updatedBy', '' . "\0" . 'Gdr\\GameBundle\\Entity\\ForumPost' . "\0" . 'authorName', '' . "\0" . 'Gdr\\GameBundle\\Entity\\ForumPost' . "\0" . 'authorRaceName', '' . "\0" . 'Gdr\\GameBundle\\Entity\\ForumPost' . "\0" . 'authorRaceIcon', '' . "\0" . 'Gdr\\GameBundle\\Entity\\ForumPost' . "\0" . 'authorLevelName', '' . "\0" . 'Gdr\\GameBundle\\Entity\\ForumPost' . "\0" . 'authorLevelIcon', '' . "\0" . 'Gdr\\GameBundle\\Entity\\ForumPost' . "\0" . 'isFirstPost', '' . "\0" . 'Gdr\\GameBundle\\Entity\\ForumPost' . "\0" . 'isLastPost', '' . "\0" . 'Gdr\\GameBundle\\Entity\\ForumPost' . "\0" . 'nameAsAdmin', '' . "\0" . 'Gdr\\GameBundle\\Entity\\ForumPost' . "\0" . 'nameAsMod', '' . "\0" . 'Gdr\\GameBundle\\Entity\\ForumPost' . "\0" . 'isClosed', '' . "\0" . 'Gdr\\GameBundle\\Entity\\ForumPost' . "\0" . 'isDeleted', 'threadForm'];
    }

    /**
     * 
     */
    public function __wakeup()
    {
        if ( ! $this->__isInitialized__) {
            $this->__initializer__ = function (ForumPost $proxy) {
                $proxy->__setInitializer(null);
                $proxy->__setCloner(null);

                $existingProperties = get_object_vars($proxy);

                foreach ($proxy->__getLazyProperties() as $property => $defaultValue) {
                    if ( ! array_key_exists($property, $existingProperties)) {
                        $proxy->$property = $defaultValue;
                    }
                }
            };

        }
    }

    /**
     * 
     */
    public function __clone()
    {
        $this->__cloner__ && $this->__cloner__->__invoke($this, '__clone', []);
    }

    /**
     * Forces initialization of the proxy
     */
    public function __load()
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, '__load', []);
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitialized($initialized)
    {
        $this->__isInitialized__ = $initialized;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitializer(\Closure $initializer = null)
    {
        $this->__initializer__ = $initializer;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __getInitializer()
    {
        return $this->__initializer__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setCloner(\Closure $cloner = null)
    {
        $this->__cloner__ = $cloner;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific cloning logic
     */
    public function __getCloner()
    {
        return $this->__cloner__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     * @static
     */
    public function __getLazyProperties()
    {
        return self::$lazyPropertiesDefaults;
    }

    
    /**
     * {@inheritDoc}
     */
    public function getId()
    {
        if ($this->__isInitialized__ === false) {
            return (int)  parent::getId();
        }


        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getId', []);

        return parent::getId();
    }

    /**
     * {@inheritDoc}
     */
    public function setBody($body)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setBody', [$body]);

        return parent::setBody($body);
    }

    /**
     * {@inheritDoc}
     */
    public function getBody()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getBody', []);

        return parent::getBody();
    }

    /**
     * {@inheritDoc}
     */
    public function setCreatedAt($createdAt)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setCreatedAt', [$createdAt]);

        return parent::setCreatedAt($createdAt);
    }

    /**
     * {@inheritDoc}
     */
    public function getCreatedAt()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCreatedAt', []);

        return parent::getCreatedAt();
    }

    /**
     * {@inheritDoc}
     */
    public function setUpdatedAt($updatedAt)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setUpdatedAt', [$updatedAt]);

        return parent::setUpdatedAt($updatedAt);
    }

    /**
     * {@inheritDoc}
     */
    public function getUpdatedAt()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getUpdatedAt', []);

        return parent::getUpdatedAt();
    }

    /**
     * {@inheritDoc}
     */
    public function setAuthorName($authorName)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setAuthorName', [$authorName]);

        return parent::setAuthorName($authorName);
    }

    /**
     * {@inheritDoc}
     */
    public function getAuthorName()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getAuthorName', []);

        return parent::getAuthorName();
    }

    /**
     * {@inheritDoc}
     */
    public function setAuthorRaceName($authorRaceName)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setAuthorRaceName', [$authorRaceName]);

        return parent::setAuthorRaceName($authorRaceName);
    }

    /**
     * {@inheritDoc}
     */
    public function getAuthorRaceName()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getAuthorRaceName', []);

        return parent::getAuthorRaceName();
    }

    /**
     * {@inheritDoc}
     */
    public function setAuthorRaceIcon($authorRaceIcon)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setAuthorRaceIcon', [$authorRaceIcon]);

        return parent::setAuthorRaceIcon($authorRaceIcon);
    }

    /**
     * {@inheritDoc}
     */
    public function getAuthorRaceIcon()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getAuthorRaceIcon', []);

        return parent::getAuthorRaceIcon();
    }

    /**
     * {@inheritDoc}
     */
    public function setIsFirstPost($isFirstPost)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setIsFirstPost', [$isFirstPost]);

        return parent::setIsFirstPost($isFirstPost);
    }

    /**
     * {@inheritDoc}
     */
    public function getIsFirstPost()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getIsFirstPost', []);

        return parent::getIsFirstPost();
    }

    /**
     * {@inheritDoc}
     */
    public function setIsDeleted($isDeleted)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setIsDeleted', [$isDeleted]);

        return parent::setIsDeleted($isDeleted);
    }

    /**
     * {@inheritDoc}
     */
    public function getIsDeleted()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getIsDeleted', []);

        return parent::getIsDeleted();
    }

    /**
     * {@inheritDoc}
     */
    public function setThread(\Gdr\GameBundle\Entity\ForumThread $thread = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setThread', [$thread]);

        return parent::setThread($thread);
    }

    /**
     * {@inheritDoc}
     */
    public function getThread()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getThread', []);

        return parent::getThread();
    }

    /**
     * {@inheritDoc}
     */
    public function setAuthor(\Gdr\UserBundle\Entity\Personage $author = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setAuthor', [$author]);

        return parent::setAuthor($author);
    }

    /**
     * {@inheritDoc}
     */
    public function getAuthor()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getAuthor', []);

        return parent::getAuthor();
    }

    /**
     * {@inheritDoc}
     */
    public function getAuthorLevelIcon()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getAuthorLevelIcon', []);

        return parent::getAuthorLevelIcon();
    }

    /**
     * {@inheritDoc}
     */
    public function setAuthorLevelIcon($authorLevelIcon)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setAuthorLevelIcon', [$authorLevelIcon]);

        return parent::setAuthorLevelIcon($authorLevelIcon);
    }

    /**
     * {@inheritDoc}
     */
    public function getAuthorLevelName()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getAuthorLevelName', []);

        return parent::getAuthorLevelName();
    }

    /**
     * {@inheritDoc}
     */
    public function setAuthorLevelName($authorLevelName)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setAuthorLevelName', [$authorLevelName]);

        return parent::setAuthorLevelName($authorLevelName);
    }

    /**
     * {@inheritDoc}
     */
    public function getNameAsAdmin()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getNameAsAdmin', []);

        return parent::getNameAsAdmin();
    }

    /**
     * {@inheritDoc}
     */
    public function setNameAsAdmin($nameAsAdmin)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setNameAsAdmin', [$nameAsAdmin]);

        return parent::setNameAsAdmin($nameAsAdmin);
    }

    /**
     * {@inheritDoc}
     */
    public function getNameAsMod()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getNameAsMod', []);

        return parent::getNameAsMod();
    }

    /**
     * {@inheritDoc}
     */
    public function setNameAsMod($nameAsMod)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setNameAsMod', [$nameAsMod]);

        return parent::setNameAsMod($nameAsMod);
    }

    /**
     * {@inheritDoc}
     */
    public function getIsLastPost()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getIsLastPost', []);

        return parent::getIsLastPost();
    }

    /**
     * {@inheritDoc}
     */
    public function setIsLastPost($isLastPost)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setIsLastPost', [$isLastPost]);

        return parent::setIsLastPost($isLastPost);
    }

    /**
     * {@inheritDoc}
     */
    public function getIsClosed()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getIsClosed', []);

        return parent::getIsClosed();
    }

    /**
     * {@inheritDoc}
     */
    public function setIsClosed($isClosed)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setIsClosed', [$isClosed]);

        return parent::setIsClosed($isClosed);
    }

    /**
     * {@inheritDoc}
     */
    public function getThreadForm()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getThreadForm', []);

        return parent::getThreadForm();
    }

    /**
     * {@inheritDoc}
     */
    public function setThreadForm($threadForm)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setThreadForm', [$threadForm]);

        return parent::setThreadForm($threadForm);
    }

    /**
     * {@inheritDoc}
     */
    public function getUpdatedBy()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getUpdatedBy', []);

        return parent::getUpdatedBy();
    }

    /**
     * {@inheritDoc}
     */
    public function setUpdatedBy($updatedBy)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setUpdatedBy', [$updatedBy]);

        return parent::setUpdatedBy($updatedBy);
    }

}
