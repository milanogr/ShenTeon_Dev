<?php

namespace Proxies\__CG__\Gdr\GameBundle\Entity;

/**
 * DO NOT EDIT THIS FILE - IT WAS CREATED BY DOCTRINE'S PROXY GENERATOR
 */
class Enclave extends \Gdr\GameBundle\Entity\Enclave implements \Doctrine\ORM\Proxy\Proxy
{
    /**
     * @var \Closure the callback responsible for loading properties in the proxy object. This callback is called with
     *      three parameters, being respectively the proxy object to be initialized, the method that triggered the
     *      initialization process and an array of ordered parameters that were passed to that method.
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setInitializer
     */
    public $__initializer__;

    /**
     * @var \Closure the callback responsible of loading properties that need to be copied in the cloned object
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setCloner
     */
    public $__cloner__;

    /**
     * @var boolean flag indicating if this object was already initialized
     *
     * @see \Doctrine\Common\Persistence\Proxy::__isInitialized
     */
    public $__isInitialized__ = false;

    /**
     * @var array properties to be lazy loaded, with keys being the property
     *            names and values being their default values
     *
     * @see \Doctrine\Common\Persistence\Proxy::__getLazyProperties
     */
    public static $lazyPropertiesDefaults = [];



    /**
     * @param \Closure $initializer
     * @param \Closure $cloner
     */
    public function __construct($initializer = null, $cloner = null)
    {

        $this->__initializer__ = $initializer;
        $this->__cloner__      = $cloner;
    }







    /**
     * 
     * @return array
     */
    public function __sleep()
    {
        if ($this->__isInitialized__) {
            return ['__isInitialized__', 'id', 'name', 'category', 'banner', 'bannerName', 'shield', 'shieldName', 'statute', 'annex', 'ranks', 'maxMembers', 'isActive', 'isClan', 'isNobili', '' . "\0" . 'Gdr\\GameBundle\\Entity\\Enclave' . "\0" . 'notOfficial', 'updatedAt'];
        }

        return ['__isInitialized__', 'id', 'name', 'category', 'banner', 'bannerName', 'shield', 'shieldName', 'statute', 'annex', 'ranks', 'maxMembers', 'isActive', 'isClan', 'isNobili', '' . "\0" . 'Gdr\\GameBundle\\Entity\\Enclave' . "\0" . 'notOfficial', 'updatedAt'];
    }

    /**
     * 
     */
    public function __wakeup()
    {
        if ( ! $this->__isInitialized__) {
            $this->__initializer__ = function (Enclave $proxy) {
                $proxy->__setInitializer(null);
                $proxy->__setCloner(null);

                $existingProperties = get_object_vars($proxy);

                foreach ($proxy->__getLazyProperties() as $property => $defaultValue) {
                    if ( ! array_key_exists($property, $existingProperties)) {
                        $proxy->$property = $defaultValue;
                    }
                }
            };

        }
    }

    /**
     * 
     */
    public function __clone()
    {
        $this->__cloner__ && $this->__cloner__->__invoke($this, '__clone', []);
    }

    /**
     * Forces initialization of the proxy
     */
    public function __load()
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, '__load', []);
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitialized($initialized)
    {
        $this->__isInitialized__ = $initialized;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitializer(\Closure $initializer = null)
    {
        $this->__initializer__ = $initializer;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __getInitializer()
    {
        return $this->__initializer__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setCloner(\Closure $cloner = null)
    {
        $this->__cloner__ = $cloner;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific cloning logic
     */
    public function __getCloner()
    {
        return $this->__cloner__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     * @static
     */
    public function __getLazyProperties()
    {
        return self::$lazyPropertiesDefaults;
    }

    
    /**
     * {@inheritDoc}
     */
    public function __toString()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, '__toString', []);

        return parent::__toString();
    }

    /**
     * {@inheritDoc}
     */
    public function getBanner()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getBanner', []);

        return parent::getBanner();
    }

    /**
     * {@inheritDoc}
     */
    public function setBanner($banner)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setBanner', [$banner]);

        return parent::setBanner($banner);
    }

    /**
     * {@inheritDoc}
     */
    public function getId()
    {
        if ($this->__isInitialized__ === false) {
            return (int)  parent::getId();
        }


        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getId', []);

        return parent::getId();
    }

    /**
     * {@inheritDoc}
     */
    public function setName($name)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setName', [$name]);

        return parent::setName($name);
    }

    /**
     * {@inheritDoc}
     */
    public function getName()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getName', []);

        return parent::getName();
    }

    /**
     * {@inheritDoc}
     */
    public function setBannerName($bannerName)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setBannerName', [$bannerName]);

        return parent::setBannerName($bannerName);
    }

    /**
     * {@inheritDoc}
     */
    public function getBannerName()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getBannerName', []);

        return parent::getBannerName();
    }

    /**
     * {@inheritDoc}
     */
    public function setStatute($statute)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setStatute', [$statute]);

        return parent::setStatute($statute);
    }

    /**
     * {@inheritDoc}
     */
    public function getStatute()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getStatute', []);

        return parent::getStatute();
    }

    /**
     * {@inheritDoc}
     */
    public function setAnnex($annex)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setAnnex', [$annex]);

        return parent::setAnnex($annex);
    }

    /**
     * {@inheritDoc}
     */
    public function getAnnex()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getAnnex', []);

        return parent::getAnnex();
    }

    /**
     * {@inheritDoc}
     */
    public function setCategory(\Gdr\GameBundle\Entity\EnclaveCategory $category = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setCategory', [$category]);

        return parent::setCategory($category);
    }

    /**
     * {@inheritDoc}
     */
    public function getCategory()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCategory', []);

        return parent::getCategory();
    }

    /**
     * {@inheritDoc}
     */
    public function addRank(\Gdr\GameBundle\Entity\EnclaveRank $ranks)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addRank', [$ranks]);

        return parent::addRank($ranks);
    }

    /**
     * {@inheritDoc}
     */
    public function removeRank(\Gdr\GameBundle\Entity\EnclaveRank $ranks)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'removeRank', [$ranks]);

        return parent::removeRank($ranks);
    }

    /**
     * {@inheritDoc}
     */
    public function getRanks()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getRanks', []);

        return parent::getRanks();
    }

    /**
     * {@inheritDoc}
     */
    public function getUpdatedAt()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getUpdatedAt', []);

        return parent::getUpdatedAt();
    }

    /**
     * {@inheritDoc}
     */
    public function setUpdatedAt($updatedAt)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setUpdatedAt', [$updatedAt]);

        return parent::setUpdatedAt($updatedAt);
    }

    /**
     * {@inheritDoc}
     */
    public function getMaxMembers()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getMaxMembers', []);

        return parent::getMaxMembers();
    }

    /**
     * {@inheritDoc}
     */
    public function setMaxMembers($maxMembers)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setMaxMembers', [$maxMembers]);

        return parent::setMaxMembers($maxMembers);
    }

    /**
     * {@inheritDoc}
     */
    public function getIsActive()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getIsActive', []);

        return parent::getIsActive();
    }

    /**
     * {@inheritDoc}
     */
    public function setIsActive($isActive)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setIsActive', [$isActive]);

        return parent::setIsActive($isActive);
    }

    /**
     * {@inheritDoc}
     */
    public function getIsClan()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getIsClan', []);

        return parent::getIsClan();
    }

    /**
     * {@inheritDoc}
     */
    public function setIsClan($isClan)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setIsClan', [$isClan]);

        return parent::setIsClan($isClan);
    }

    /**
     * {@inheritDoc}
     */
    public function getIsNobili()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getIsNobili', []);

        return parent::getIsNobili();
    }

    /**
     * {@inheritDoc}
     */
    public function setIsNobili($isNobili)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setIsNobili', [$isNobili]);

        return parent::setIsNobili($isNobili);
    }

    /**
     * {@inheritDoc}
     */
    public function getNotOfficial()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getNotOfficial', []);

        return parent::getNotOfficial();
    }

    /**
     * {@inheritDoc}
     */
    public function setNotOfficial($notOfficial)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setNotOfficial', [$notOfficial]);

        return parent::setNotOfficial($notOfficial);
    }

    /**
     * {@inheritDoc}
     */
    public function setShieldName($shieldName)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setShieldName', [$shieldName]);

        return parent::setShieldName($shieldName);
    }

    /**
     * {@inheritDoc}
     */
    public function getShieldName()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getShieldName', []);

        return parent::getShieldName();
    }

    /**
     * {@inheritDoc}
     */
    public function getShield()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getShield', []);

        return parent::getShield();
    }

    /**
     * {@inheritDoc}
     */
    public function setShield($shield)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setShield', [$shield]);

        return parent::setShield($shield);
    }

}
