<?php

namespace Gdr\ItemsBundle\Entity;

use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\Query\Expr;

/**
 * ItemRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ItemRepository extends EntityRepository
{
    /**
     * @param $level
     * @param $market
     * @param $category
     *
     * @return array
     */
    public function findActiveItemsByLevelAndMarketAndCategoryQuery($level, $market, $category)
    {
        return $this->createQueryBuilder('i')
            ->addSelect(
                'i.id, i.name, i.shortDescription, i.showActiveDescription, i.activeDescription, i.quantity,
                            i.weight, i.price, i.imageName, i.dressIconImageName'
            )
            ->addSelect('it.id AS categoryId, it.name AS categoryName')
            ->leftJoin('i.type', 'it')
            ->andWhere('i.market = :market')
            ->setParameter('market', $market)
            ->andWhere('it.id = :category')
            ->setParameter('category', $category)
            ->andWhere('i.level = :level')
            ->setParameter('level', $level)
            ->andWhere('i.isSellable = :active')
            ->setParameter('active', true)
            ->andWhere('i.quantity > 0')
            ->addOrderBy('it.name', 'DESC')
            ->addOrderBy('i.name', 'DESC')
            ->getQuery();
    }

    public function findActiveItemsByEnclaveAndMarketAndCategoryQuery($enclave, $market, $category, $isEnclave)
    {
        $enclaveType = $isEnclave ? 'enclave' : 'clan';

        return $this->createQueryBuilder('i')
            ->addSelect(
                'i.id, i.name, i.shortDescription, i.showActiveDescription, i.activeDescription, i.quantity,
                            i.weight, i.price, i.imageName, i.dressIconImageName'
            )
            ->addSelect('it.id AS categoryId, it.name AS categoryName')
            ->leftJoin('i.type', 'it')
            ->andWhere('i.market = :market')
            ->setParameter('market', $market)
            ->andWhere('it.id = :category')
            ->setParameter('category', $category)
//            ->andWhere('i.level = :level')
//            ->setParameter('level', $level)

            ->andWhere("i.{$enclaveType} = :enclave")
            ->setParameter('enclave', $enclave)

            ->andWhere('i.isSellable = :active')
            ->setParameter('active', true)
//            ->andWhere('i.quantity > 0')
            ->addOrderBy('it.name', 'DESC')
            ->addOrderBy('i.name', 'DESC')
            ->getQuery();
    }

    public function getMaxMana($personage_id)
    {
        return $this->createQueryBuilder('i')
            ->select('SUM(i.addMana) as totalMana')
            ->innerJoin('GdrItemsBundle:Inventory', 'it', 'WITH', 'it.item = i.id')
            ->andWhere('it.personage = :personage')
            ->setParameter('personage', $personage_id)
            ->andWhere('i.grimoryLevel > :level')
            ->setParameter('level', 0)
            ->groupBy('i.grimoryLevel')
            ->setMaxResults(1)
            ->getQuery()
            ->getSingleScalarResult();
    }

    public function getItemsByProperty($id)
    {
        return $this->createQueryBuilder('i')
            ->innerJoin('GdrItemsBundle:PropertyItem', 'pi', 'WITH', 'pi.item = i.id')
            ->andWhere('pi.property = :id')
            ->setParameter('id', $id)
            ->getQuery()
            ->getResult();
    }

    public function getBaseItemsForInventory()
    {
        return $this->createQueryBuilder('i')
            ->andWhere('i.isBaseItem = true')
            ->getQuery()
            ->getResult();
    }
}
