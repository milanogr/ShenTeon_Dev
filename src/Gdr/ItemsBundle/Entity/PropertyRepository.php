<?php

namespace Gdr\ItemsBundle\Entity;

use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\Mapping\ClassMetadata;

/**
 * HouseRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class PropertyRepository extends EntityRepository
{
    public function getBaseQuery()
    {
        return $this->createQueryBuilder('p')
            ->andWhere('p.isActive = true');
    }

    public function getAllWithOwner()
    {
        return $this->createQueryBuilder('p')
            ->andWhere('p.owner IS NOT NULL')
            ->orderBy('p.owner', 'ASC')
            ->addOrderBy('p.tax', 'DESC')
            ->getQuery()
            ->getResult();
    }


    public function getAllWithOwnerForAdmin()
    {
        return $this->createQueryBuilder('p')
            ->innerJoin('p.owner', 'o')
            ->orderBy('o.name', 'ASC')
            ->andWhere('p.frequencyItems IS NOT NULL')
            ->getQuery()
//            ->setFetchMode('P', 'o', ClassMetadata::FETCH_EAGER)
            ->getResult();
    }

    public function getAllWithoutOwner()
    {
        return $this->createQueryBuilder('p')
            ->andWhere('p.owner IS NULL')
            ->orderBy('p.name')
            ->getQuery()
            ->getResult();
    }

    public function getAllByType($type)
    {
        return $this->getBaseQuery()
            ->andWhere('p.type = :type')
            ->andWhere('p.owner is null')
            ->setParameters(
                array(
                    'type' => $type,
                )
            )
            ->orderBy('p.name')
            ->getQuery()
            ->getResult();
    }

    public function deletePropertiesToRemoveOnNewPersonage($personage)
    {
        return $this->createQueryBuilder("p")
            ->delete()
            ->andWhere("p.owner = :owner")
            ->setParameter("owner", $personage)
            ->getQuery()->getResult();
    }

    /**
     * @param     $id
     * @param int $type
     *
     * @return \Doctrine\ORM\QueryBuilder
     */
    public function getPropertiesByPersonage($id, $type = 1)
    {
        $qb = $this->createQueryBuilder('p');

        if ($type == 1) {
            $qb->andWhere('p.type = 1');
        } else {
            $qb->andWhere('p.type != 1');
        }

        return $qb->andWhere('p.owner = :id')
            ->setParameter('id', $id)
            ->getQuery()
            ->getResult();
    }

    public function getActivitiesWithProductsAndNulledProduction()
    {
        return $this->createQueryBuilder('p')
            ->innerJoin('GdrItemsBundle:PropertyItem', 'pi', 'WITH', 'pi.property = p.id')
            ->innerJoin('GdrItemsBundle:Item', 'i', 'WITH', 'pi.item = i.id')
            ->andWhere('p.type != 1')
            ->andWhere('p.nextProductionAt IS NULL')
            ->andWhere('p.owner IS NOT NULL')
            ->getQuery()
            ->getResult();
    }

    public function getActivitiesWithProducts()
    {
        return $this->createQueryBuilder('p')
            ->andWhere('p.type != 1')
            ->andWhere('p.nextProductionAt IS NOT NULL')
            ->andWhere('p.owner IS NOT NULL')
            ->andWhere('p.nextProductionAt <= :now')
            ->setParameter('now', new \DateTime())
            ->getQuery()
            ->setFetchMode('Property', 'Item', 'EAGER')
            ->setFetchMode('Property', 'PropertyItem', 'EAGER')
            ->getResult();
    }
}