<?php

namespace Gdr\GameBundle\Entity;

use Doctrine\ORM\EntityRepository;
use Symfony\Component\Debug\Exception\FatalErrorException;

/**
 * ChatRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ChatRepository extends EntityRepository
{
    public function createBaseQuery($location)
    {
        return $this->createQueryBuilder('c')
            ->andWhere('c.location = :location')
            ->setParameter('location', $location)
            ->orderBy('c.createdAt', 'ASC');
    }


    /**
     * Recupera le azioni dopo un certo id.
     *
     * @param      $location
     * @param null $startId
     *
     * @return array
     * @throws \Symfony\Component\Debug\Exception\FatalErrorException
     */
    public function getLatestForAjax($location, $startId = null)
    {
        if (!$location || $startId == null) {
            throw new FatalErrorException('Nessuna location o start id definito.');
        }

        $results = $this->createBaseQuery($location)
            ->andWhere('c.id > :id')
            ->setParameter('id', $startId)
            ->getQuery()
            ->getResult();

        return $results;
    }

    /**
     *  Recupera gli ultimi minuti prima dell'ingresso in chat.
     *
     * @param $location
     * @param null $startTime
     * @param bool $whisperer
     * @return array
     * @throws \Symfony\Component\Debug\Exception\FatalErrorException
     */
    public function getLatest($location, $startTime = null, $whisperer = true)
    {
        if (!$location) {
            throw new FatalErrorException('Nessuna location definita.');
        }

        // Se non c'Ã¨ un time di inizio recupero tutte le azioni nei 15 minuti precedenti.
        if (null === $startTime) {
            $startTime = new \DateTime('-15 minutes');
        }

        $query = $this->createBaseQuery($location);

        if ($whisperer == false) {
            $query->andWhere('c.receiverWhispered is null');
        }

        return $query->andWhere('c.createdAt >= :time')
            ->setParameter('time', $startTime)
            ->getQuery()
            ->getResult();
    }

    public function getLastOneForCast($personage_id)
    {
        return $this->createQueryBuilder('c')
            ->andWhere('c.sender = :personage')
            ->setParameter('personage', $personage_id)
            ->andWhere('c.type = 1 OR c.type = 2')
            ->orderBy('c.createdAt', 'DESC')
            ->setMaxResults(1)
            ->getQuery()
            ->getOneOrNullResult();
    }

    public function cleanOldest()
    {
        return $this->createQueryBuilder('c')
            ->delete()
            ->where('c.createdAt <= :date')
            ->setParameter('date', new \DateTime("- 6 months"))
            ->getQuery()
            ->execute();
    }
}
