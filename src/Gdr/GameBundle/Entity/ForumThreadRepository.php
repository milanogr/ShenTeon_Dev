<?php

namespace Gdr\GameBundle\Entity;

use Doctrine\ORM\EntityRepository;

/**
 * ForumThreadRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ForumThreadRepository extends EntityRepository
{
    public function createBaseQuery()
    {
        return $this->createQueryBuilder('ft');
    }

    public function getThreadsByCategory($category, $pg_id)
    {
        return $this->createBaseQuery()
            ->addSelect(
                'fp.authorName as authorName, fp.authorRaceName as authorRace, fp.authorRaceIcon as authorRaceIcon'
            )
            ->addSelect(
                'fc.name as categoryName'
            )
            ->addSelect(
                'fp.authorLevelIcon as authorLevelIcon, fp.authorLevelName as authorLevelName, fp.nameAsAdmin as nameAsAdmin'
            )
            ->addSelect(
                'fp.nameAsMod as nameAsMod, ft.status as status, ft.isLocked as isLocked, IDENTITY(fp.author) AS authorId'
            )
            ->addSelect("COALESCE(tr.isReaded, false) as threadReaded")
            ->innerJoin('GdrGameBundle:ForumCategory', 'fc', 'WITH', 'fc.id = ft.category')
            ->innerJoin('GdrGameBundle:ForumPost', 'fp', 'WITH', 'fp.thread = ft.id AND fp.isFirstPost = true')
            ->leftJoin('GdrGameBundle:ThreadReaded', 'tr', 'WITH', 'tr.thread = ft.id AND tr.personage = ' . $pg_id)
            ->andWhere('ft.category = :category')
            ->setParameter('category', $category)
            ->orderBy('ft.status', 'DESC')
            ->addOrderBy('ft.lastPostTime', 'DESC')
            ->addOrderBy('fp.createdAt', 'DESC')
            ->getQuery();
    }

    public function getThreadsBySpecial($category)
    {
        return $this->createBaseQuery()
            ->addSelect(
                'fp.updatedAt as updatedAt, fp.id as postId'
            )
            ->addSelect(
                'fp.authorName as authorName, fp.authorRaceName as authorRace, fp.authorRaceIcon as authorRaceIcon'
            )
            ->addSelect(
                'fc.name as categoryName, fp.body as body'
            )
            ->addSelect(
                'fp.authorLevelIcon as authorLevelIcon, fp.authorLevelName as authorLevelName, fp.nameAsAdmin as nameAsAdmin'
            )
            ->addSelect(
                'fp.nameAsMod as nameAsMod, IDENTITY(fp.author) AS authorId'
            )
            ->innerJoin('GdrGameBundle:ForumCategory', 'fc', 'WITH', 'fc.id = ft.category')
            ->innerJoin('GdrGameBundle:ForumPost', 'fp', 'WITH', 'fp.thread = ft.id AND fp.isFirstPost = true')
            ->andWhere('ft.category = :category')
            ->setParameter('category', $category)
            ->orderBy('ft.status', 'DESC')
            ->addOrderBy('ft.lastPostTime', 'DESC')
            ->addOrderBy('fp.createdAt', 'DESC')
            ->getQuery();
    }

    public function getThreadsByHelpdesk($category, $author_id)
    {
        return $this->createBaseQuery()
            ->addSelect(
                'ft.id as id, ft.title as title, fp.updatedAt as updatedAt, fp.id as postId, ft.lastPostAuthor as lastPostAuthor, ft.lastPostTime as lastPostTime'
            )
            ->addSelect(
                'fp.authorName as authorName, fp.authorRaceName as authorRace, fp.authorRaceIcon as authorRaceIcon'
            )
            ->addSelect(
                'ft.createdAt as createdAt, fc.name as categoryName, ft.replied as replied, ft.readed as readed, fp.body as body'
            )
            ->addSelect(
                'fp.authorLevelIcon as authorLevelIcon, fp.authorLevelName as authorLevelName, fp.nameAsAdmin as nameAsAdmin'
            )
            ->addSelect(
                'fp.nameAsMod as nameAsMod, ft.status as status, ft.isLocked as isLocked, IDENTITY(fp.author) AS authorId'
            )
            ->innerJoin('GdrGameBundle:ForumCategory', 'fc', 'WITH', 'fc.id = ft.category')
            ->innerJoin('GdrGameBundle:ForumPost', 'fp', 'WITH', 'fp.thread = ft.id AND fp.isFirstPost = true')
            ->andWhere('fc.helpDesk = :category')
            ->setParameter('category', $category)
            ->andWhere('fp.author = :author')
            ->setParameter('author', $author_id)
            ->orderBy('ft.lastPostTime', 'DESC')
            ->getQuery();
    }

    public function getFirstPostOfThread($thread_id)
    {
        return $this->createBaseQuery()
            ->select('ft.id as id, IDENTITY(fp.author) as authorId, fp.authorName as author, ft.title as title')
            ->innerJoin('GdrGameBundle:ForumPost', 'fp', 'WITH', 'fp.thread = ft.id AND fp.isFirstPost = true')
            ->andWhere('fp.thread = :thread')
            ->setParameter('thread', $thread_id)
            ->setMaxResults(1)
            ->getQuery()
            ->getOneOrNullResult();
    }

    public function getLastPostTimeByCategory($section_id)
    {
        return $this->createBaseQuery()
            ->andWhere('ft.category = :category')
            ->setParameter('category', $section_id)
            ->setMaxResults(1)
            ->orderBy('ft.lastPostTime', 'DESC')
            ->getQuery()
            ->useQueryCache(true)
            ->useResultCache(true, 60 * 5)
            ->getSingleResult();
    }
}
