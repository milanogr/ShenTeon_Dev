<?php

namespace Gdr\GameBundle\Entity;

use Doctrine\ORM\EntityRepository;

/**
 * ForumRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ForumRepository extends EntityRepository
{
    public function createBaseQuery()
    {
        return $this->createQueryBuilder('f')
            ->andWhere('f.isActive = true');
    }

    public function getForumsByType($type, $enclave = null, $level = null)
    {

        $qb = $this->createBaseQuery()
            ->select('f.name as name, fc.lastPostAuthor as lastPostAuthor, fc.lastPostTime as lastPostTime')
            ->addSelect('fc.name as categoryName, fc.description as categoryDescription, fc.id as categoryId')
            ->addSelect('ft.title as lastThreadTitle')
            ->innerJoin('GdrGameBundle:ForumCategory', 'fc', 'WITH', 'f.id = fc.forum')
            ->leftJoin('GdrGameBundle:ForumThread', 'ft', 'WITH', 'ft.id = fc.lastThread')
            ->andWhere('f.type = :type')
            ->setParameter('type', $type);

        if (null !== $enclave) {
            $qb->andWhere('f.enclave = :enclave')
                ->setParameter('enclave', $enclave)
                ->andWhere('fc.levelMin <= :level')
                ->setParameter('level', $level);
        }

        $qb->orderBy('f.sorting')
            ->addOrderBy('f.name')
            ->addOrderBy('fc.sort');

        return $qb->getQuery()->getResult();
    }

    public function findEnclaveForums($enclave)
    {
        return $this->createQueryBuilder("f")
            ->andWhere("f.enclave = :enclave")
            ->andWhere("f.type = :type")
            ->setParameter("enclave", $enclave)
            ->setParameter("type", Forum::TYPE_ENCLAVE)
            ->getQuery()
            ->getResult();
    }

    public function findClanForums($clan)
    {
        return $this->createQueryBuilder("f")
            ->andWhere("f.enclave = :enclave")
            ->andWhere("f.type = :type")
            ->setParameter("enclave", $clan)
            ->setParameter("type", Forum::TYPE_CLAN)
            ->getQuery()
            ->getResult();
    }

    public function getForumsByEnclaveAndClan()
    {
        return $this->createQueryBuilder("f")
            ->innerJoin('f.enclave', 'e')
            ->andWhere("f.enclave IS NOT NULL")
            ->groupBy('f.enclave')
            ->getQuery()
            ->setFetchMode('Forum', 'enclave', 'EAGER')
            ->getResult();
    }

    public function getForumsByEnclaveOrClan($id)
    {
        return $this->createBaseQuery()
            ->select('f.name as name, fc.lastPostAuthor as lastPostAuthor, fc.lastPostTime as lastPostTime')
            ->addSelect('fc.name as categoryName, fc.description as categoryDescription, fc.id as categoryId')
            ->addSelect('ft.title as lastThreadTitle')
            ->innerJoin('GdrGameBundle:ForumCategory', 'fc', 'WITH', 'f.id = fc.forum')
            ->leftJoin('GdrGameBundle:ForumThread', 'ft', 'WITH', 'ft.id = fc.lastThread')
            ->andWhere("f.enclave = :enclave")
            ->setParameter("enclave", $id)
            ->orderBy('f.sorting')
            ->addOrderBy('f.name')
            ->addOrderBy('fc.sort')
            ->getQuery()
            ->getResult();
    }
}
