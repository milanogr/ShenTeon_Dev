<?php

namespace Gdr\UserBundle\Entity;

use Doctrine\ORM\EntityRepository;
use Gdr\RaceBundle\Entity\Race;

/**
 * SkillRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class SkillRepository extends EntityRepository
{
    public function findSkillsWithLearned($personage, $lvl, $race)
    {
        return $this->createQueryBuilder('s')
            ->select('s.id as id, s.name as name, s.description as description, COALESCE(sl.id, 0) as isLearned')
            ->addSelect('s.imageName as imageName, s.hoursToReload as hoursToReload')
            ->leftJoin('GdrUserBundle:SkillLearned', 'sl', 'WITH', 's.id = sl.skill AND sl.personage = ' . $personage)
            ->andWhere('s.level = :level')
            ->andWhere('s.race = :race')
            ->andWhere('s.isRandom = false')
            ->setParameters(
                array(
                    'level' => $lvl,
                    'race' => $race
                )
            )
            ->orderBy('s.name', 'ASC')
            ->getQuery()
            ->getResult();
    }

    /**
     * Verifica se ho già appreso una skill per questo livello.
     *
     * @param $personage
     * @param $level
     *
     * @return bool
     */
    public function canLearnOnLevel(Personage $personage, $level)
    {
        $skills = $this->createQueryBuilder('s')
            ->select('COUNT(sl.id) as tot')
            ->leftJoin('GdrUserBundle:SkillLearned', 'sl', 'WITH', 's.id = sl.skill AND sl.personage = ' . $personage->getId())
            ->andWhere('s.level = :level')
            ->andWhere('sl.id IS NOT NULL')
            ->andWhere('s.isRandom = false')
            ->setParameters(
                array(
                    'level' => $level,
                )
            )
            ->getQuery()
            ->getSingleScalarResult();

        $return = $skills !== null && $skills > 0 ? false : true;

        // Se il livello da controllare è maggiore del mio, torno comunque false.
        return $level > $personage->getRaceLevel() ? false : $return;
    }

    /**
     * @param Personage $personage
     * @param null $level
     * @return bool
     */
    public function canLearnRandomSkill(Personage $personage, $level = null)
    {
        $level = ($level) ? $level : $personage->getRaceLevel();

        $skills = $this->createQueryBuilder('s')
            ->select('COUNT(sl.id) as tot')
            ->leftJoin('GdrUserBundle:SkillLearned', 'sl', 'WITH', 's.id = sl.skill AND sl.personage = ' . $personage->getId())
            ->andWhere('s.level = :level')
            ->andWhere('sl.id IS NOT NULL')
            ->andWhere('s.isRandom = true')
            ->setParameters(
                array(
                    'level' => $level,
                )
            )
            ->getQuery()
            ->getSingleScalarResult();

        // Se il risultato è diverso da NULL e maggiore di 0, allora significa che NON posso sutdiare perché già
        // presente un incantesimo.
        $return = $skills !== null && $skills > 0 ? false : true;

        // Se il livello da controllare è maggiore del mio, torno comunque false.
        $a = $level > $personage->getRaceLevel() ? false : $return;

        return $a;
    }

    public function getRandomSkill($level)
    {
        return $this->createQueryBuilder('s')
            ->andWhere('s.level = :level')
            ->setParameter('level', $level)
            ->getQuery()
            ->getOneOrNullResult();
    }

    public function getRandomSkills($level)
    {
        return $this->createQueryBuilder('s')
            ->andWhere('s.level = :level')
            ->setParameter('level', $level)
            ->andWhere('s.isRandom = true')
            ->getQuery()
            ->getResult();
    }
}
