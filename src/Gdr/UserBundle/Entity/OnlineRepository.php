<?php

namespace Gdr\UserBundle\Entity;

use Doctrine\Common\Cache\ApcCache;
use Doctrine\ORM\EntityRepository;

/**
 * OnlineRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class OnlineRepository extends EntityRepository
{

    /**
     * Recupera gli utenti usciti senza passare dal logout.
     */
    public function getUsersOffline($limit)
    {
        return $this->createQueryBuilder('o')
            ->andWhere('o.lastActivity < :limit')
            ->setParameter('limit', $limit)
            ->getQuery()
            ->getResult();
    }

    public function getPersonagesOnline()
    {
        return $this->createQueryBuilder('o')
            ->select(
                'p.id as pgId, p.name as pgName, r.name as raceName, r.maleIconName as raceMaleIcon,
                r.femaleIconName as raceFemaleIcon, p.gender as pgGender, l.name as locName, l.id as locId,
                o.status as status, o.isInGame as isInGame, p.isDead as isDead
                '
            )
            ->addSelect('COALESCE(pt.isGestore, 0) as isGestore')
            ->addSelect('COALESCE(pt.isModeratore, 0) as isModeratore')
            ->addSelect('COALESCE(pt.isGuida, 0) as isGuida')
            ->leftJoin('GdrUserBundle:PersonageType', 'pt', 'WITH', 'pt.personage = o.personage')
            ->innerJoin('GdrUserBundle:Personage', 'p', 'WITH', 'o.personage = p.id')
            ->innerJoin('GdrRaceBundle:Race', 'r', 'WITH', 'r.id = p.race')
            ->innerJoin('GdrGameBundle:Location', 'l', 'WITH', 'o.location = l.id')
            ->andWhere('o.isActive = true')
            ->andWhere('o.isInvisible = false')
            ->orderBy('p.name', 'ASC')
            ->getQuery()
            ->getResult();
    }

    public function getPersonagesOnlineForChat($id)
    {
        return $this->createQueryBuilder('o')
            ->select(
                'p.id as id, p.name as name, r.name as race, r.maleIconName as maleIcon, r.femaleIconName as femaleIcon'
            )
            ->addSelect(
                'p.gender as gender, it.dressIconImageName as itemImage, o.isInGame as isInGame, it.name as item, p.isDead as isDead'
            )
            ->addSelect('COALESCE(pt.isGestore, 0) as isGestore')
            ->addSelect('COALESCE(pt.isModeratore, 0) as isModeratore')
            ->addSelect('COALESCE(pt.isGuida, 0) as isGuida')
            ->leftJoin('GdrUserBundle:PersonageType', 'pt', 'WITH', 'pt.personage = o.personage')
            ->innerJoin('GdrUserBundle:Personage', 'p', 'WITH', 'o.personage = p.id')
            ->innerJoin('GdrRaceBundle:Race', 'r', 'WITH', 'r.id = p.race')
            ->innerJoin('GdrItemsBundle:Inventory', 'inv', 'WITH', 'inv.personage = p.id')
            ->innerJoin('GdrItemsBundle:Item', 'it', 'WITH', 'it.id = inv.item')
            ->innerJoin('GdrGameBundle:Location', 'l', 'WITH', 'o.location = l.id')
            ->andWhere('o.location = :id')
            ->andWhere('inv.isDressed = true')
            ->andWhere('o.isActive = true')
            ->andWhere('o.isInvisible = false')
            ->setParameter("id", $id)
            ->orderBy('p.name', 'ASC')
            ->groupBy('p.id')
            ->getQuery()
            ->getResult();
    }

    public function getPersonagesOnlineByLocationForChat($loc_id, $pg_id)
    {
        $results = $this->createQueryBuilder('o')
            ->select('p.id as id, p.name as name')
            ->innerJoin('GdrUserBundle:Personage', 'p', 'WITH', 'o.personage = p.id')
            ->andWhere('o.isActive = :true')
            ->andWhere('o.location = :location')
            ->andWhere('o.isInvisible = false')
            ->setParameters(
                array(
                    'true' => true,
                    'location' => $loc_id
                )
            )
            ->groupBy('p.id')
            ->getQuery()
            ->getResult();

        $return = array();
        foreach ($results as $r) {
            $return[$r['id']] = $r['name'];
        }

        // Rimuovo me stesso
        unset($return[$pg_id]);

        return $return;
    }

    public function countPersonageOnline()
    {
        return $this->createQueryBuilder('o')
            ->select("COUNT(o.id) as totale")
            ->andWhere('o.isActive = true')
            ->andWhere('o.isInvisible = false')
            ->getQuery()
            ->getSingleScalarResult();
    }

    public function getPersonageOnlineIds()
    {
        return $this->createQueryBuilder('o')
            ->select('p.id as id')
            ->innerJoin('o.personage', 'p')
            ->andWhere('o.isActive = true')
            ->getQuery()
            ->getResult();
    }

    public function getActiveLocations()
    {
        return $this->createQueryBuilder('o')
            ->select('l.id')
            ->innerJoin('o.location', 'l')
            ->where('o.isInGame = true')
            ->andWhere('o.isActive = true')
            ->getQuery()
            ->getArrayResult()
            ;
    }
}
