<?php

namespace Gdr\UserBundle\Entity;

use Doctrine\ORM\EntityRepository;

/**
 * SkillLearnedRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class SkillLearnedRepository extends EntityRepository
{
    public function findSkillsLearnedForChat($personage)
    {
        return $this->createQueryBuilder('sl')
            ->select(
                's.id as id, s.name as name, s.description as description, sl.canUseAt as canUseAt, s.level as level, s.isRandom as isRandom'
            )
            ->addSelect('s.imageName as imageName')
            ->innerJoin('GdrUserBundle:Skill', 's', 'WITH', 's.id = sl.skill')
            ->andWhere('sl.personage = :personage')
            ->setParameter('personage', $personage)
            ->orderBy('s.level', 'ASC')
            ->getQuery()
            ->getResult();
    }

    public function deleteSkillsByPersonage($pg_id)
    {
        return $this->createQueryBuilder('sl')
            ->delete()
            ->andWhere('personage = :id')
            ->setParameter('id', $pg_id)
            ->getQuery()
            ->execute();
    }

    public function getRandomSkillForPlayerAndLevel(Personage $player, $level)
    {
        return $this->createQueryBuilder('sl')
            ->innerJoin('GdrUserBundle:Skill', 's', 'WITH', 's.id = sl.skill')
            ->andWhere('sl.personage = :player')
            ->setParameter('player', $player)
            ->andWhere('s.level = :level')
            ->setParameter('level', $level)
            ->andWhere('s.isRandom = true')
            ->getQuery()
            ->getOneOrNullResult();
    }

    public function getRandomSkillForPlayer(Personage $player)
    {
        return $this->createQueryBuilder('sl')
            ->innerJoin('GdrUserBundle:Skill', 's', 'WITH', 's.id = sl.skill')
            ->andWhere('sl.personage = :player')
            ->setParameter('player', $player)
            ->andWhere('s.isRandom = true')
            ->getQuery()
            ->getResult();
    }
}
