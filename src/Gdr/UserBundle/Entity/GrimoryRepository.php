<?php

namespace Gdr\UserBundle\Entity;

use Doctrine\ORM\EntityRepository;

/**
 * SpellRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class GrimoryRepository extends EntityRepository
{
    public function createBaseQuery($personage_id)
    {
        return $this->createQueryBuilder('g')
            ->innerJoin('GdrUserBundle:Spell', 's', 'WITH', 'g.spell = s.id')
            ->andWhere('g.personage = :personage')
            ->setParameter('personage', $personage_id)
            ->andWhere('s.isActive = :true')
            ->setParameter('true', true);
    }

    public function createBaseSelectedQuery($personage_id)
    {
        return $this->createBaseQuery($personage_id)
            ->andWhere('g.isSelected = :true')
            ->setParameter('true', true);
    }

    public function createBaseLearnedQuery($personage_id)
    {
        return $this->createBaseQuery($personage_id)
            ->andWhere('g.isLearned = :true')
            ->setParameter('true', true);
    }

    // --------------------------------------------------------

    /**
     * @param $personage_id
     *
     * Rappresenta la quantità di mana che ho utilizzato fin ora, che è data dalla somma dei "level" dei miei incantesimi.
     *
     * @return mixed
     */
    public function getLearnedMana($personage_id)
    {
        $result = $this->createBaseLearnedQuery($personage_id)
            ->select('SUM(s.level) AS totalUsedMana')
            ->getQuery()
            ->getSingleScalarResult();

        return !$result ? 0 : $result;
    }

    public function getSelectedMana($personage_id)
    {
        $result = $this->createBaseSelectedQuery($personage_id)
            ->select('SUM(s.level) AS totalUsedMana')
            ->getQuery()
            ->getSingleScalarResult();

        return !$result ? 0 : $result;
    }

    public function findSpellsLearned($personage_id, $obj = false)
    {
        $q = $this->createBaseLearnedQuery($personage_id)
            ->innerJoin('GdrUserBundle:SpellCategory', 'sc', 'WITH', 'sc.id = s.category')
            ->addOrderBy('sc.name', 'ASC')
            ->addOrderBy('s.level', 'ASC')
            ->addOrderBy('s.name', 'ASC');

        if (false === $obj) {
            $q->select(
                's.id AS id, s.name AS name, s.description AS description, s.level AS level, sc.name AS category,
                g.isUsed as isUsed'
            );
        }

        return $q->getQuery()->getResult();
    }

    public function findSpellsSelected($personage_id, $obj = false)
    {
        $q = $this->createBaseSelectedQuery($personage_id)
            ->innerJoin('GdrUserBundle:SpellCategory', 'sc', 'WITH', 'sc.id = s.category')
            ->addOrderBy('sc.name', 'ASC')
            ->addOrderBy('s.level', 'ASC')
            ->addOrderBy('s.name', 'ASC');

        if (false === $obj) {
            $q->select(
                's.id AS id, s.name AS name, s.description AS description, s.level AS level, sc.name AS category,
                g.isUsed as isUsed'
            );
        }

        return $q->getQuery()->getResult();
    }

    /**
     * Recupera il numero di incantesimi in grimorio per livello.
     */
    public function getTotalSpellsSelectedByLevel($level, $personage_id)
    {
        return $this->createBaseSelectedQuery($personage_id)
            ->select('COUNT(g.id) AS totalSpells')
            ->andWhere('s.level = :level')
            ->setParameter('level', $level)
            ->getQuery()
            ->getSingleScalarResult();
    }

    public function canUseSpell($spell_id, $personage_id)
    {
        $result = $this->createBaseLearnedQuery($personage_id)
            ->andWhere('g.spell = :spell')
            ->setParameter('spell', $spell_id)
            ->getQuery()
            ->getOneOrNullResult();

        return $result === null ? false : true;
    }

    public function getSpellsSelectForChat($personage_id)
    {
        $return = array();
        $grimories = $this->createQueryBuilder('s')
            ->select('s.name as spellName, s.id as SpellId, sc.name as categoryName')
            ->innerJoin('GdrUserBundle:Grimory', 'g', 'WITH', 'g.spell = s.id')
            ->innerJoin('GdrUserBundle:SpellCategory', 'sc', 'WITH', 'sc.id = s.category')
            ->andWhere('g.personage = :personage')
            ->setParameter('personage', $personage_id)
            ->andWhere('g.isLearned = :true')
            ->setParameter('true', true)
            ->andWhere('s.isActive = :true')
            ->setParameter('true', true)
            ->orderBy('s.name')
            ->addOrderBy('s.category', 'ASC')
            ->getQuery()
            ->getResult();

        foreach ($grimories as $grimory){
            $return[$grimory['categoryName']][$grimory['spellId']] = $grimory['spellName'];
        }

        return $return;
    }

    /**
     * @param $personage
     * @param $level
     * @return array
     */
    public function findToDeleteSpellsByPersonageAndLevel($personage, $level){
        return $this->createQueryBuilder("g")
            ->innerJoin("g.spell", "s")
            ->andWhere("g.personage = :personage")
            ->andWhere("s.level = :level")
            ->setParameter("level", $level)
            ->setParameter(":personage", $personage)
            ->getQuery()->getResult();
    }
}
